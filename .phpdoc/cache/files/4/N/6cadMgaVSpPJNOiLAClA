1656736687
AwuilbDvXz%3A4a9a8f1b55acf1535b430f0a589d8b9a-f77ff979aeb460cba0a9d8bceda645dd
s:20808:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImY3N2ZmOTc5YWViNDYwY2JhMGE5ZDhiY2VkYTY0NWRkIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6NDQ6IjBkNTBmOThkNmZmODQwMjUzMDJmNWEzMWUzYTE4M2I0MjE1ZTVmM2UucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6Njg6InN0b3JhZ2UvZnJhbWV3b3JrL3ZpZXdzLzBkNTBmOThkNmZmODQwMjUzMDJmNWEzMWUzYTE4M2I0MjE1ZTVmM2UucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxNDczNjoiPCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSI8P3BocCBlY2hvIGUoc3RyX3JlcGxhY2UoJ18nLCAnLScsIGFwcCgpLT5nZXRMb2NhbGUoKSkpOyA/PiI+DQoNCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KDQogICAgPHRpdGxlPlNvcG9ydGU8L3RpdGxlPg0KDQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL3VucGtnLmNvbS9zd2lwZXIvc3dpcGVyLWJ1bmRsZS5jc3MiIC8+DQoNCiAgICA8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Imh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20iPg0KDQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSI8P3BocCBlY2hvIGUobWl4KCdjc3MvYXBwLmNzcycpKTsgPz4iPg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iPD9waHAgZWNobyBlKG1peCgnY3NzL2V4dHJhLmNzcycpKTsgPz4iPg0KICAgIDxzY3JpcHQgc3JjPSI8P3BocCBlY2hvIGUobWl4KCdqcy9hcHAuanMnKSk7ID8+IiBkZWZlcj48L3NjcmlwdD4NCg0KICAgIDw/cGhwIGVjaG8gXExpdmV3aXJlXExpdmV3aXJlOjpzdHlsZXMoKTsgPz4NCg0KPC9oZWFkPg0KDQo8Ym9keSBjbGFzcz0iYW50aWFsaWFzZWQgYmctcHJpbWFyeSBmb250LWJvZHkiPg0KDQogICAgPGRpdiBjbGFzcz0ibWluLWgtc2NyZWVuIGZsZXggZmxleC1jb2wganVzdGlmeS1iZXR3ZWVuIHRleHQtd2hpdGUiPg0KICAgICAgICA8P3BocAppZiAoISBpc3NldCgkX2luc3RhbmNlKSkgewogICAgJGh0bWwgPSBcTGl2ZXdpcmVcTGl2ZXdpcmU6Om1vdW50KCduYXZpZ2F0aW9uLW1lbnUnKS0+aHRtbCgpOwp9IGVsc2VpZiAoJF9pbnN0YW5jZS0+Y2hpbGRIYXNCZWVuUmVuZGVyZWQoJ0ZyZnRkUzUnKSkgewogICAgJGNvbXBvbmVudElkID0gJF9pbnN0YW5jZS0+Z2V0UmVuZGVyZWRDaGlsZENvbXBvbmVudElkKCdGcmZ0ZFM1Jyk7CiAgICAkY29tcG9uZW50VGFnID0gJF9pbnN0YW5jZS0+Z2V0UmVuZGVyZWRDaGlsZENvbXBvbmVudFRhZ05hbWUoJ0ZyZnRkUzUnKTsKICAgICRodG1sID0gXExpdmV3aXJlXExpdmV3aXJlOjpkdW1teU1vdW50KCRjb21wb25lbnRJZCwgJGNvbXBvbmVudFRhZyk7CiAgICAkX2luc3RhbmNlLT5wcmVzZXJ2ZVJlbmRlcmVkQ2hpbGQoJ0ZyZnRkUzUnKTsKfSBlbHNlIHsKICAgICRyZXNwb25zZSA9IFxMaXZld2lyZVxMaXZld2lyZTo6bW91bnQoJ25hdmlnYXRpb24tbWVudScpOwogICAgJGh0bWwgPSAkcmVzcG9uc2UtPmh0bWwoKTsKICAgICRfaW5zdGFuY2UtPmxvZ1JlbmRlcmVkQ2hpbGQoJ0ZyZnRkUzUnLCAkcmVzcG9uc2UtPmlkKCksIFxMaXZld2lyZVxMaXZld2lyZTo6Z2V0Um9vdEVsZW1lbnRUYWdOYW1lKCRodG1sKSk7Cn0KZWNobyAkaHRtbDsKPz4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IG14LWF1dG8gY29udGFpbmVyIHB5LTUgdGV4dC1sZyBsZzp3LWZ1bGwgdy04MCI+DQogICAgICAgICAgICA8YXNpZGUgY2xhc3M9Im1pbi1oLXNjcmVlbiBzdGlja3kgdG9wLTAgdy1mdWxsIj4NCiAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJweS00IGxnOnB4LTYgcHgtMiBmbGV4IGZsZXgtY29sIGl0ZW1zLXN0YXJ0IG92ZXJmbG93LXktYXV0byI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTEwIj4gDQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9udC1ib2xkIHRleHQtMnhsIGJvcmRlci1iLTIiPkludml0YWRvPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtdC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhICBocmVmPSIjaW5zY3JpYmlyc2UtdGFsbGVyIj5JbnNjcmliaXJzZSBhIHVuIHRhbGxlci48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2VsaW1pbmFkby10YWxsZXIiPsK/UXVlIGRlYm8gaGFjZXIgc2kgZnVpIGVsaW1pbmFkbyBkZSB1biB0YWxsZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJob3Zlcjp0ZXh0LWdyYXktMjAwIHB5LTEgY3Vyc29yLXBvaW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjYW51bGFyLWluc2NyaXBjaW9uIj7Cv0NvbW8gcHVlZG8gYW51bGFyIG1pIGluc2NyaXBjacOzbiBhIHVuIHRhbGxlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS0yMDAgcHktMSBjdXJzb3ItcG9pbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNyZWluc2NyaWJpcnNlLXRhbGxlciI+wr9QdWVkbyB2b2x2ZXIgYSBpbnNjcmliaXJtZSBhIHVuIHRhbGxlciBkZWwgY3VhbCBmdWkgZWxpbWluYWRvPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTEwIj4gDQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9udC1ib2xkIHRleHQtMnhsIGJvcmRlci1iLTIiPk9yZ2FuaXphZG9yPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtdC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNvcmdhbml6YXItdGFsbGVyIj5Pcmdhbml6YXIgdW4gdGFsbGVyLjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaG92ZXI6dGV4dC1ncmF5LTQwMCBweS0xIGN1cnNvci1wb2ludGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI3NpZ25pZmljYS1wZW5kaWVudGUtdGFsbGVyIj7Cv1F1ZSBzaWduaWZpY2FkbyBlbCBlc3RhZG8gcGVuZGllbnRlIGVuIG1pIHNvbGljaXR1ZCBkZSB0YWxsZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJob3Zlcjp0ZXh0LWdyYXktNDAwIHB5LTEgY3Vyc29yLXBvaW50ZXIiPsK/Q3XDoWwgZXMgZWwgbcOheGltbyBkZSBwZXJzb25hcyBxdWUgcHVlZG8gcmV1bmlyPw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+wr9DdWFudG8gZGVibyBlc3BlcmFyIHBhcmEgcXVlIG1pIHRhbGxlciBlc3TDqSBhcHJvYmFkbz88L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+wr9QdWVkbyBlbnNlw7FhciBhIG1lbm9yZXMgZGUgZWRhZD88L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtYm9sZCB0ZXh0LTJ4bCBib3JkZXItYi0yIj5SZXByZXNlbnRhbnRlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1iLTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaG92ZXI6dGV4dC1ncmF5LTQwMCBweS0xIGN1cnNvci1wb2ludGVyIj5BcnRpc3Rhcy48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJob3Zlcjp0ZXh0LWdyYXktNDAwIHB5LTEgY3Vyc29yLXBvaW50ZXIiPsK/Q3VhbnRvcyBhcnRpc3RhcyBwdWVkbyByZXByZXNlbnRhcj88L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJob3Zlcjp0ZXh0LWdyYXktNDAwIHB5LTEgY3Vyc29yLXBvaW50ZXIiPsK/TWUgcHVlZG8gcmVwcmVzZW50YXIgYSBtaSBtaXNtbz88L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaG92ZXI6dGV4dC1ncmF5LTQwMCBweS0xIGN1cnNvci1wb2ludGVyIj7Cv0N1YW50byBkZWJvIGVzcGVyYXIgcGFyYSBxdWUgbWkgYXJ0aXN0YSBhcGFyZXpjYSBlbiBlbCBzaXRpbyB3ZWI/PC9saT4gDQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+wr9Qb3JxdWUgbWkgYXJ0aXN0YSBubyBhcGFyZWNlPzwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJob3Zlcjp0ZXh0LWdyYXktNDAwIHB5LTEgY3Vyc29yLXBvaW50ZXIiPsK/UXVlIGRlYm8gaGFjZXIgc2kgdW4gYXJ0aXN0YSBhbCBjdcOhbCByZXByZXNlbnRvIGZ1ZSBlbGltaW5hZG8gZGUgdW4gZXZlbnRvPzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhvdmVyOnRleHQtZ3JheS00MDAgcHktMSBjdXJzb3ItcG9pbnRlciI+PGEgIGhyZWY9IiNhbnVsYXItaW5zY3JpcGNpb24iPsK/Q29tbyBwdWVkbyBhbnVsYXIgbGEgaW5zY3JpcGNpw7NuIGRlIHVubyBvIG3DoXMgZGUgbWlzIGFydGlzdGFzIGEgdW4gZXZlbnRvPzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgPC9hc2lkZT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPG1haW4+DQogICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtM3hsIj5JbnZpdGFkbzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMTAgcHktNCIgaWQ9Imluc2NyaWJpcnNlLXRhbGxlciI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+SW5zY3JpYmlyc2UgYSB1biB0YWxsZXI8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWxpZ2h0IHRleHQtanVzdGlmeSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTMiPkFsIG1vbWVudG8gZGUgaW5zY3JpYmlydGUgYSB1biB0YWxsZXIgZXMgbmVjZXNhcmlvIHF1ZSBsZSBpbmRpcXVlcyBhbCBvcmdhbml6YWRvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dXMgZGF0b3MgcGVyc29uYWxlcyB5IGRlIGNvbnRhY3RvIGNvbiBlbCBmaW4gZGUgcXVlIHRlIHB1ZWRhIGlkZW50aWZpY2FyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIGVudHJlIGxvcyBkZW3DoXMgYXNpc3RlbnRlcyB5L28gY29tdW5pY2Fyc2UgY29udGlnbyBlbiBjYXNvIGRlIHF1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGEgYWxnw7puIHByb2JsZW1hIGNvbiBsYSByZWFsaXphY2nDs24gZGVsIHRhbGxlci4gRW4gY2FzbyBkZSBxdWUgYcO6biBubyBzZXBhcyBxdWUgaGFjZW1vcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gbGEgaW5mb3JtYWNpw7NuIHF1ZSBub3MgcHJvcG9yY2lvbmFzIGVjaGFsZSB1biB2aXN0YXpvIGEgbnVlc3Ryb3MgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ijw/cGhwIGVjaG8gZShyb3V0ZSgndGVybWlub3MtY29uZGljaW9uZXMnKSk7ID8+IiBjbGFzcz0iZm9udC1ib2xkIj50w6lybWlub3MgeSBjb25kaWNpb25lcyBkZSB1c28uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCBwcm9jZXNvIGRlIGluc2NyaXBjacOzbiBhbCB0YWxsZXIgbm8gdGUgZGViZSB0b21hciBtw6FzIGRlIDUgbWludXRvcyB5IHRlIHJlY29tZW5kYW1vcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNhcmVjaWRhbWVudGUgcXVlIG5vcyBwcm9wb3JjaW9uZXMgaW5mb3JtYWNpw7NuIHJlYWwgeSBmaWxlZGlnbmEgcGFyYSBldml0YXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlIGVsIG9yZ2FuaXphZG9yIHRlIGVsaW1pbmUuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlVuYSB2ZXogcXVlIHRlIGhheWFzIGluc2NyaXRvIGV4aXRvc2FtZW50ZSBhbCB0YWxsZXIgcXVlIGhhcyBzZWxlY2Npb25hZG8gc2Vyw6FzIG5vdGlmaWNhZG8gYWwgY29ycmVvIHF1ZSBwcm9wb3JjaW9uYXN0ZSBlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCBmb3JtdWxhcmlvIGRlIGluc2NyaXBjacOzbi4gRXMgcG9zaWJsZSBxdWUgYWwgbWlzbW8gY29ycmVvIHRlIGxsZWd1ZW4gbnVldmFzIG5vdGlmaWNhY2lvbmVzIGVuIGNhc28gZGUgcXVlIGVsIHRhbGxlciBzZSBoYXlhIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NwdWVzdG8sIGNhbmNlbGFkbyBvIHRlIGhheWFuIGVsaW1pbmFkbyBkZSBlc3RlIHBvciBhbGfDum4gbW90aXZvIGVzcGVjaWZpY28uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTEwIiBpZD0iZWxpbWluYWRvLXRhbGxlciI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+wr9RdWUgZGVibyBoYWNlciBzaSBtZSBlbGltaW5hcm9uIGRlIHVuIHRhbGxlcj8gPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1saWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW4gY2FzbyBkZSBxdWUgdGUgaGF5YXMgaW5zY3JpdG8gYSB1biB0YWxsZXIgeSBhbCB0aWVtcG8gZGVzcHXDqXMgaGFzIHNpZG8gbm90aWZpY2Fkbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZSBxdWUgc2UgdGUgaGEgZWxpbWluYWRvIHkgbm8gcG9kcsOhcyBwYXJ0aWNpcGFyIGRlYmVzIHRlbmVyIGVuIGNvbnNpZGVyYWNpw7NuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvIHNpZ3VpZW50ZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCBzdHlsZT0ibGlzdC1zdHlsZS10eXBlOiBudW1iZXIiIGNsYXNzPSJteS00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpIG5vIGhhcyB1dGlsaXphZG8gaW5mb3JtYWNpw7NuIGZpbGVkaWduYSBvIHJlYWwgZXMgcG9zaWJsZSBxdWUgc2UgdGUgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXlhIGVsaW1pbmFkbyBwb3IgZmFsdGEgYWwgcmVnbGFtZW50by48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2kgaGFzIHJlYWxpemFkbyB1biBtYWwgdXNvIGRlbCBmb3JtdWxhcmlvIGRlIGluc2NyaXBjacOzbiwgZXMgcG9zaWJsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlIGVsIG9yZ2FuaXphZG9yIHRlIGhheWEgZWxpbWluYWRvIHBvciBmYWx0YSBhIGxhIG1vcmFsLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4gY2xhc3M9ImZvbnQtYm9sZCI+Tm90YTogPC9zcGFuPiBTaSBsYXMgY29uZGljaW9uZXMgbWVuY2lvbmFkYXMgYW50ZXJpb3JtZW50ZSBubyBhcGxpY2FuIGEgdHUgY2FzbyB5IGNyZWVzIHF1ZSBlc3RvIGHDum4gc2UgdHJhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGUgdW4gZXJyb3IsIGVuIHByaW1lciBsdWdhciBkZWJlcyBjb250YWN0YXJ0ZSBjb24gZWwgb3JnYW5pemFkb3IgZGVsIGV2ZW50byBhbCBjdcOhbCB0ZSBoYXogDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2NyaXRvLiBTaSBubyB0aWVuZXMgZXhpdG8gcHVlZGVzIGNvbnRhY3RhcnRlIGNvbiBlbCBjb3JyZW8gZGUgc29wb3J0ZSA8c3BhbiBjbGFzcz0iZm9udC1ib2xkIj5qb3JnZS52bmFydmFlekBnbWFpbC5jb208L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0xMCIgaWQ9ImFudWxhci1pbnNjcmlwY2lvbiI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+wr9Dw7NtbyBwdWVkbyBhbnVsYXIgbWkgaW5zY3JpcGNpw7NuIGEgdW4gdGFsbGVyPyA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWxpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5FbiBjYXNvIGRlIHF1ZSB0ZSBoYXlhcyBpbnNjcml0byBhIHVuIHRhbGxlciB5IHlhIG5vIHF1aWVyZXMgbyBwdWVkZXMgcGFydGljaXBhciBlbiDDqWwsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhIMO6bmljYSBmb3JtYSBxdWUgZXhpc3RlIGhhc3RhIGVsIG1vbWVudG8gcGFyYSBhbnVsYXIgdHUgaW5zY3JpcGNpw7NuIGVzIGNvbXVuaWNhcnRlIGRpcmVjdGFtZW50ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gZWwgb3JnYW5pemFkb3IgZGVsIHRhbGxlciB5YSBzZWEgcG9yIHRlbMOpZm9ubyBvIGNvcnJlbyBlbGVjdHJvbmljbywgbG9zIGN1w6FsZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVlZGVzIGVuY29udHJhciBlbiBsYSBpbmZvcm1hY2nDs24gZGVsIG1pc21vIHRhbGxlciBhbCBjdcOhbCB0ZSBoYXMgaW5zY3JpdG8geSBkZXNlYXMgYWJhbmRvbmFyLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMjAiIGlkPSJyZWluc2NyaWJpcnNlLXRhbGxlciI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+wr9QdWVkbyB2b2x2ZXIgYSBpbnNjcmliaXJtZSBhIHVuIHRhbGxlciBkZWwgY3VhbCBmdWkgZWxpbWluYWRvPzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtbGlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVuIGNhc28gZGUgcXVlIHRlIGhheWFuIGVsaW1pbmFkbyBkZSB1biB0YWxsZXIgZXMgcG9zaWJsZSBxdWUgdGUgdnVlbHZhcyBhIGluc2NyaWJpciwgcGVybyB0ZW4gZW4gY3VlbnRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZSBwcm9udG8gZXN0byB5YSBubyB0ZSBzZXLDoSBwb3NpYmxlIGNvbiBlbCA8c3BhbiBjbGFzcz0iZm9udC1ib2xkIj5udWV2byBzaXN0ZW1hIGRlIGNvbXBvcnRhbWllbnRvPC9zcGFuPiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRlbcOhcyBkZSBxdWUgdm9sdmVyw6FzIGEgc2VyIGVsaW1pbmFkbyB1bmEgeSBvdHJhIHZlei4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LTN4bCI+T3JnYW5pemFkb3I8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTEwIHB5LTQiIGlkPSJvcmdhbml6YXItdGFsbGVyIj4gDQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC0yeGwgZm9udC1ib2xkIj5Pcmdhbml6YXIgdW4gdGFsbGVyPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1saWdodCB0ZXh0LWp1c3RpZnkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0zIj5JbXBvcnRhbnRlOiBFc3RhIGZ1bmNpb25hbGlkYWQgc29sbyBlc3RhIGRpc3BvbmlibGUgcGFyYSBhcXVlbGxvcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c3VhcmlvcyBxdWUgc2UgaGFuIHJlZ2lzdHJhZG8gY29tbyBvcmdhbml6YWRvcmVzLiANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnRlcyBkZSBvcmdhbml6YXIgdW4gdGFsbGVyIHVzdGVkIGRlYmUgc2FiZXIgcXVlIGxhIGluZm9ybWFjacOzbiBxdWUgbm9zIHByb3BvcmNpb25lDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcsOhIHJldmlzYWRhIHBvciBsb3MgYWRtaW5pc3RyYWRvcmVzIGRlbCBzaXRpby4gU2UgbGUgaW5mb3JtYXLDoSBlbiB0b2RvIG1vbWVudG8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwgZXN0YWRvIGVuIGVsIHF1ZSBzZSBlbmN1ZW50cmEgc3Ugc29saWNpdHVkLCBwYXJhIGVsbG8gcHVlZGUgZGlyaWdpcnNlIGEgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb250LWJvbGQiPlRhbGxlcmVzL01pcyBTb2xpY2l0dWRlczwvc3Bhbj4gZGVzZGUgbGEgYmFycmEgZGUgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmVnYWNpw7NuLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICANCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMTAiIGlkPSJzaWduaWZpY2EtcGVuZGllbnRlLXRhbGxlciI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+wr9RdWUgc2lnbmlmaWNhZG8gZWwgZXN0YWRvIHBlbmRpZW50ZSBlbiBtaSBzb2xpY2l0dWQgZGUgdGFsbGVyPzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtbGlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlR1IHNvbGljaXR1ZCBwYXJhIG9yZ2FuaXphciB1biB0YWxsZXIgYWwgaWd1YWwgcXVlIHVuYSBwbGFudGEgZHVyYW50ZSBzdSBjaWNsbyBkZSB2aWRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZSBjbGFzaWZpY2EgZW4gbG9zIGRpc3RpbnRvcyBlc3RhZG9zIHF1ZSBleHBlcmltZW50YSwgZW4gZXN0ZSBjYXNvIGVsIHByaW1lcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RhZG8gcXVlIHNlIGxlIGFzaWduYSBhIHR1IHNvbGljaXR1ZCBlcyBwZW5kaWVudGUsIGVzdG8gcXVpZXJlIGRlY2lyIHF1ZSBsb3MgYWRtaW5pc3RyYWRvcmVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdMOhbiByZXZpc2FuZG8gbGEgaW5mb3JtYWNpw7NuIHF1ZSBoYXMgcHJvcG9yY2lvbmFkbyB5IGRlbnRybyBkZSBwb2NvIHNlIHRlIGluZm9ybWFyw6ENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGEgZGVjaXNpw7NuIHF1ZSBoYW4gdG9tYWRvLiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz0iZm9udC1ib2xkIj5JbXBvcnRhbnRlOiA8L3NwYW4+RWwgdGFsbGVyIG5vIHNlIHZpc3VhbGl6YXLDoSBlbiBsYSBww6FnaW5hIHByaW5jaXBhbCBtaWVudHJhcyBzdSBzb2xpY2l0dWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2UgZW5jdWVudHJlIGVuIGVzdGFkbyBwZW5kaWVudGUsIHJldmlzYWRhLCBtb2RpZmljYWRhIG8gcG9zcHVlc3RhLiBQYXJhIG3DoXMgaW5mb3JtYWNpw7NuIGFjZXJjYQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZSBsb3MgZGVtw6FzIGVzdGFkb3MgY29uc3VsdGUgPGEgaHJlZj0iZXN0YWRvcy1zb2xpY2l0dWQtdGFsbGVyIiBjbGFzcz0iZm9udC1ib2xkIj5lc3RhZG9zIGRlIHNvbGl0aWN1ZDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0xMCIgaWQ9ImFudWxhci1pbnNjcmlwY2lvbiI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+wr9Dw7NtbyBwdWVkbyBhbnVsYXIgbWkgaW5zY3JpcGNpw7NuIGEgdW4gdGFsbGVyPyA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWxpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5FbiBjYXNvIGRlIHF1ZSB0ZSBoYXlhcyBpbnNjcml0byBhIHVuIHRhbGxlciB5IHlhIG5vIHF1aWVyZXMgbyBwdWVkZXMgcGFydGljaXBhciBlbiDDqWwsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhIMO6bmljYSBmb3JtYSBxdWUgZXhpc3RlIGhhc3RhIGVsIG1vbWVudG8gcGFyYSBhbnVsYXIgdHUgaW5zY3JpcGNpw7NuIGVzIGNvbXVuaWNhcnRlIGRpcmVjdGFtZW50ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gZWwgb3JnYW5pemFkb3IgZGVsIHRhbGxlciB5YSBzZWEgcG9yIHRlbMOpZm9ubyBvIGNvcnJlbyBlbGVjdHJvbmljbywgbG9zIGN1w6FsZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVlZGVzIGVuY29udHJhciBlbiBsYSBpbmZvcm1hY2nDs24gZGVsIG1pc21vIHRhbGxlciBhbCBjdcOhbCB0ZSBoYXMgaW5zY3JpdG8geSBkZXNlYXMgYWJhbmRvbmFyLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMjAiIGlkPSJyZWluc2NyaWJpcnNlLXRhbGxlciI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtMnhsIGZvbnQtYm9sZCI+wr9QdWVkbyB2b2x2ZXIgYSBpbnNjcmliaXJtZSBhIHVuIHRhbGxlciBkZWwgY3VhbCBmdWkgZWxpbWluYWRvPzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtbGlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVuIGNhc28gZGUgcXVlIHRlIGhheWFuIGVsaW1pbmFkbyBkZSB1biB0YWxsZXIgZXMgcG9zaWJsZSBxdWUgdGUgdnVlbHZhcyBhIGluc2NyaWJpciwgcGVybyB0ZW4gZW4gY3VlbnRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZSBwcm9udG8gZXN0byB5YSBubyB0ZSBzZXLDoSBwb3NpYmxlIGNvbiBlbCA8c3BhbiBjbGFzcz0iZm9udC1ib2xkIj5udWV2byBzaXN0ZW1hIGRlIGNvbXBvcnRhbWllbnRvPC9zcGFuPiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRlbcOhcyBkZSBxdWUgdm9sdmVyw6FzIGEgc2VyIGVsaW1pbmFkbyB1bmEgeSBvdHJhIHZlei4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9tYWluPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8P3BocCBlY2hvICRfX2Vudi0+bWFrZSgnZm9vdGVyJywgXElsbHVtaW5hdGVcU3VwcG9ydFxBcnI6OmV4Y2VwdChnZXRfZGVmaW5lZF92YXJzKCksIFsnX19kYXRhJywgJ19fcGF0aCddKSktPnJlbmRlcigpOyA/Pg0KICAgIDwvZGl2Pg0KDQogICAgPD9waHAgZWNobyBcTGl2ZXdpcmVcTGl2ZXdpcmU6OnNjcmlwdHMoKTsgPz4NCg0KDQo8L2JvZHk+DQoNCjwvaHRtbD4NCjw/cGhwIC8qKlBBVEggQzpcVXNlcnNcSm9yZ2VcRGVza3RvcFxMYXJhdmVsQnlYYW1wcFxiYXJ0XHJlc291cmNlc1x2aWV3cy9oZWxwLmJsYWRlLnBocCBFTkRQQVRIKiovID8+IjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";