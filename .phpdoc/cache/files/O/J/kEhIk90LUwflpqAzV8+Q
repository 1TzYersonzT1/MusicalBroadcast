1656736696
AwuilbDvXz%3Ac7eb173f026eee9f44c0299d270bdaf1-bbd6a2212121bb80a71270a4f399c8f9
s:15444:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"bbd6a2212121bb80a71270a4f399c8f9";s:39:" phpDocumentor\Reflection\Php\File name";s:44:"69025cc325719a2d4c7c7c37662361d27a8180ba.php";s:39:" phpDocumentor\Reflection\Php\File path";s:68:"storage/framework/views/69025cc325719a2d4c7c7c37662361d27a8180ba.php";s:41:" phpDocumentor\Reflection\Php\File source";s:10712:"<div class="min-h-screen py-5">
    <div class='container mx-auto py-5 text-white'>
        <div class="mb-6 lg:mt-0 mt-5"><span class="text-4xl">Organizar nuevo taller.</span></div>
        <?php if($errors): ?>
            <?php $__currentLoopData = $errors->all(); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $message): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <?php echo e($message); ?>

            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
        <?php endif; ?>
        <div class="lg:flex">
            <div class="flex flex-col lg:mr-5">
                <form wire:submit.prevent='validarNuevoTaller' enctype="multipart/form-data">
                    <?php echo csrf_field(); ?>
                    <div class="lg:flex">
                        <div class="flex flex-col">
                            <span class="font-bold">Titulo</span>
                            <div class="flex flex-col mt-1">
                                <input type="text" class="border-0 bg-primary px-0 py-1 font-light lg:w-96"
                                    wire:model='titulo' maxlength="30"
                                    placeholder="Escriba el titulo del taller (máximo 30 caracteres)" />
                            </div>
                        </div>
                    </div>
                    <div class="mt-2 flex flex-col">
                        <div class="flex mb-3">
                            <div class="flex flex-col mt-3" x-data>
                                <span class="font-bold">Fecha</span>
                                <input type="date" wire:model="fecha" x-bind:min="$wire.hoy"
                                    class="bg-primary text-white p-0 mr-5 mt-1" />
                            </div>
                            <div class="flex flex-col mt-3">
                                <span class="font-bold">Hora</span>
                                <div class="flex flex-col">
                                    <input type="time" id="hora" wire:model="hora" class="bg-primary border-0 p-0 mt-1">

                                </div>

                            </div>

                        </div>
                        <div class="flex items-center mb-2 mt-3">
                            <div class="flex flex-col">
                                <div class="flex">
                                    <span class="font-bold">Aforo:</span>
                                    <div class="flex flex-col">
                                        <input type="number" min='1' max='10' id="aforo" wire:model='aforo'
                                            class="bg-primary p-0 px-2 w-16 ml-3 mr-3" />

                                    </div>
                                </div>
                                <span>Máximo 10 personas.</span>
                            </div>
                        </div>
                        <div class="flex items-center mb-3 mt-3 text-sm">
                            <span class="font-bold">Lugar: </span>
                            <div class="flex flex-col">
                                <input type="text" placeholder="¿Donde planeas realizar el taller?" wire:model='lugar'
                                    class="border-0 bg-primary w-64 py-0 px-2" />

                            </div>
                        </div>

                        <div class="mt-3">
                            <label for="descripcion" class="font-bold lg:w-96">Descripción</label>
                            <div class="flex flex-col">
                                <textarea placeholder="Escriba una descripción (máximo 255 caracteres)"
                                    wire:model='descripcion' maxlength="255"
                                    class="resize-none lg:w-96 bg-primary h-40 mt-1 mb-1"></textarea>
                                <span><?php echo e($caracteres_descripcion); ?> / 255</span>
                            </div>
                        </div>
                    </div>
            </div>

            <div class="w-80">
                <div class="flex justify-between mb-3 items-center">
                    <span>Imagen</span>
                    <div wire:loading wire:target="imagen" class="bg-blue-100 text-blue-700 px-4" role="alert">
                        <p class="font-bold  py-1">Cargando imagen</p>
                    </div>
                </div>

                <?php $__errorArgs = ['imagen'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                    <div>
                        <label for="imagen-taller">
                            <svg xmlns="http://www.w3.org/2000/svg"
                                class="h-48 w-80 border-2 border-light-blue-500 border-opacity-100" fill="none"
                                viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                        </label>
                        <input type="file" wire:model="imagen" id="imagen-taller" class="hidden" wire:ignore />
                    </div>
                <?php else: ?>
                    <?php if(!$imagen): ?>
                        <div>
                            <label for="imagen-taller">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                    class="h-48 w-80 border-2 border-light-blue-500 border-opacity-100" fill="none"
                                    viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                            </label>
                            <input type="file" wire:model="imagen" id="imagen-taller" class="hidden" wire:ignore />
                        </div>
                    <?php else: ?>
                        <div class="mt-3">
                            <img src="<?php echo e($imagen->temporaryUrl()); ?>" class="w-80 h-48 border-2">

                            <div class="flex justify-between">
                                <span><?php echo e($imagen->getClientOriginalName()); ?></span>
                                <svg wire:click="eliminarImagen" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6"
                                    fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </div>
                        </div>
                    <?php endif; ?>
                <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
            </div>

            <div class="grid lg:grid-cols-2 lg:grid-rows-2 lg:mt-0 mt-5 ml-5">

                <?php
if (! isset($_instance)) {
    $html = \Livewire\Livewire::mount('organizador.talleres.crear.requisito.requisitos', ['requisitos' => $requisitos])->html();
} elseif ($_instance->childHasBeenRendered('xW1Cdo6')) {
    $componentId = $_instance->getRenderedChildComponentId('xW1Cdo6');
    $componentTag = $_instance->getRenderedChildComponentTagName('xW1Cdo6');
    $html = \Livewire\Livewire::dummyMount($componentId, $componentTag);
    $_instance->preserveRenderedChild('xW1Cdo6');
} else {
    $response = \Livewire\Livewire::mount('organizador.talleres.crear.requisito.requisitos', ['requisitos' => $requisitos]);
    $html = $response->html();
    $_instance->logRenderedChild('xW1Cdo6', $response->id(), \Livewire\Livewire::getRootElementTagName($html));
}
echo $html;
?>

                <?php
if (! isset($_instance)) {
    $html = \Livewire\Livewire::mount('organizador.talleres.crear.protocolo.protocolos', ['protocolos' => $protocolos])->html();
} elseif ($_instance->childHasBeenRendered('20KvxJg')) {
    $componentId = $_instance->getRenderedChildComponentId('20KvxJg');
    $componentTag = $_instance->getRenderedChildComponentTagName('20KvxJg');
    $html = \Livewire\Livewire::dummyMount($componentId, $componentTag);
    $_instance->preserveRenderedChild('20KvxJg');
} else {
    $response = \Livewire\Livewire::mount('organizador.talleres.crear.protocolo.protocolos', ['protocolos' => $protocolos]);
    $html = $response->html();
    $_instance->logRenderedChild('20KvxJg', $response->id(), \Livewire\Livewire::getRootElementTagName($html));
}
echo $html;
?>

                <div class="justify-self-center self-center">
                    <button type="submit"
                        class="border border-white px-7 py-3 my-10 lg:my-0 hover:bg-white hover:text-primary">Solicitar
                        permiso</button>
                </div>

            </div>

            </form>
        </div>
    </div>
</div>

<script>
    window.addEventListener("validarNuevoTaller", () => {
        Swal.fire({
            title: '¿Esta seguro?',
            text: 'Se enviara una solicitud para aprobar el taller',
            icon: 'info',
            showCancelButton: true,
            cancelButtonText: 'Cancelar',
            confirmButtonText: 'Confirmar',
        }).then((result) => {
            if (result.isConfirmed) {

                Livewire.emit('nuevoTallerConfirmado');

                Swal.fire({
                    title: 'Exito',
                    text: `Solicitud enviada con exito, recuerda
                    que debes esperar a que el administrador
                    apruebe la imagen`,
                    icon: 'success',
                    confirmButtonText: 'Confirmar',
                }).then((result) => {
                    if(result.isConfirmed) {
                        location.href = '/organizador/mis-solicitudes';
                    }
                });
            }
        });
    });
</script>
<?php /**PATH C:\Users\Jorge\Desktop\LaravelByXampp\bart\resources\views/livewire/organizador/talleres/crear/crear-taller.blade.php ENDPATH**/ ?>";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";