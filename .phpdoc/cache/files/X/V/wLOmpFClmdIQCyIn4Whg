1656736686
AwuilbDvXz%3A1ea6d059fde0ca6c98bb4e67a3b97b5a-e75c06e9ed026fe696f575c3e9d26afc
s:50292:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImU3NWMwNmU5ZWQwMjZmZTY5NmY1NzVjM2U5ZDI2YWZjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjU6Im5hdmlnYXRpb24tbWVudS5ibGFkZS5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo0MToicmVzb3VyY2VzL3ZpZXdzL25hdmlnYXRpb24tbWVudS5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjM2ODk0OiI8bmF2IHgtZGF0YT0ieyBvcGVuOiBmYWxzZSB9IiBjbGFzcz0iYmctZ3JheS05MDAiPg0KICAgIDwhLS0gUHJpbWFyeSBOYXZpZ2F0aW9uIE1lbnUgLS0+DQoNCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweC01Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iZmxleCBmb250LXJlZ3VsYXIganVzdGlmeS1iZXR3ZWVuIGgtMTYiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleCBqdXN0aWZ5LWJldHdlZW4iPg0KDQogICAgICAgICAgICAgICAgPCEtLSBMb2dvIC0tPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtc2hyaW5rLTAgZmxleCBpdGVtcy1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvIj48aW1nIHNyYz0iL2xvZ28tMWIucG5nIiBjbGFzcz0idy0xOCBoLTE0IiAvPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDwhLS0gTmF2aWdhdGlvbiBMaW5rcyAtLT4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4gc3BhY2UteC04IHNtOi1teS1weCBzbTptbC0xMCBzbTpmbGV4IHRleHQtd2hpdGUiPg0KICAgICAgICAgICAgICAgICAgICA8eC1qZXQtbmF2LWxpbmsgaHJlZj0iLyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eC1zbG90IG5hbWU9J3Nsb3QnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXdoaXRlIGhvdmVyOnRyYW5zZm9ybSBob3ZlcjpzY2FsZS0xMjUiPnt7IF9fKCdJbmljaW8nKSB9fTwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveC1zbG90Pg0KICAgICAgICAgICAgICAgICAgICA8L3gtamV0LW5hdi1saW5rPg0KDQogICAgICAgICAgICAgICAgICAgIEBhdXRoDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4gc206ZmxleCBzbTppdGVtcy1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlbGF0aXZlIiB4LWRhdGE9Insgb3BlbjogZmFsc2UgfSIgQGNsaWNrLmF3YXk9Im9wZW4gPSBmYWxzZSIgeC1jbG9haw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xvc2Uuc3RvcD0ib3BlbiA9IGZhbHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlubGluZS1mbGV4IHJvdW5kZWQtbWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBweC0zIHB0LTEgYm9yZGVyIGJvcmRlci10cmFuc3BhcmVudCB0ZXh0LXNtIGxlYWRpbmctNCBmb250LW1lZGl1bSByb3VuZGVkLW1kIHRleHQtd2hpdGUgYmctZ3JheS05MDAgaG92ZXI6dGV4dC1ncmF5LTIwMCBmb2N1czpvdXRsaW5lLW5vbmUgdHJhbnNpdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJ0aXN0YQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBAY2xpY2s9Im9wZW49IW9wZW4iIGNsYXNzPSJtbC0yIC1tci0wLjUgaC00IHctNCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMjAgMjAiIGZpbGw9ImN1cnJlbnRDb2xvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik01LjI5MyA3LjI5M2ExIDEgMCAwMTEuNDE0IDBMMTAgMTAuNTg2bDMuMjkzLTMuMjkzYTEgMSAwIDExMS40MTQgMS40MTRsLTQgNGExIDEgMCAwMS0xLjQxNCAwbC00LTRhMSAxIDAgMDEwLTEuNDE0eiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT0iZXZlbm9kZCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2FuKCdyZXByZXNlbnRhcicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImFic29sdXRlIHotNTAgbXQtMiBiZy13aGl0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdNZW51IGFydGlzdGFzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCdhcnRpc3Rhcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ0FydGlzdGFzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgncmVwcmVzZW50YW50ZS5jcmVhcmFydGlzdGEnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdBZ3JlZ2FyIGFydGlzdGEnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCdyZXByZXNlbnRhbnRlLm1pcy1hcnRpc3RhcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ0VzdGFkbyBzb2xpY2l0dWQnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCdyZXByZXNlbnRhbnRlLnR1c2FydGlzdGFzJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnVHVzIGFydGlzdGFzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlY2FuKCdhZG1pbmlzdHJhcicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImFic29sdXRlIHotNTAgbXQtMiBiZy13aGl0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBY2NvdW50IE1hbmFnZW1lbnQgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdBZG1pbmlzdHJhciBhcnRpc3RhcycpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnYXJ0aXN0YXMuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdBcnRpc3RhcycpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1kcm9wZG93bi1saW5rPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FkbWluaXN0cmFkb3IuYXJ0aXN0YXMnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdOdWV2b3MgYXJ0aXN0YXMnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZWNhbignb3JnYW5pemFyJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgeC1zaG93PSJvcGVuIiBjbGFzcz0iYWJzb2x1dGUgei01MCBtdC0yIGJnLXdoaXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJibG9jayBweC00IHB5LTIgdGV4dC14cyB0ZXh0LWdyYXktNDAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ1ZlciBhcnRpc3RhcycpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnYXJ0aXN0YXMuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdWZXIgQXJ0aXN0YXMnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kY2FuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgQGVuZGF1dGgNCg0KICAgICAgICAgICAgICAgICAgICBAZ3Vlc3QNCiAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1uYXYtbGluayBocmVmPSJ7eyByb3V0ZSgnYXJ0aXN0YXMuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtc2xvdCBuYW1lPSdzbG90Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtd2hpdGUgaG92ZXI6dHJhbnNmb3JtIGhvdmVyOnNjYWxlLTEyNSI+e3sgX18oJ0FydGlzdGFzJykgfX08L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LXNsb3Q+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICBAZW5kZ3Vlc3QNCg0KICAgICAgICAgICAgICAgICAgICBAYXV0aA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIHNtOmZsZXggc206aXRlbXMtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWxhdGl2ZSIgeC1kYXRhPSJ7IG9wZW46IGZhbHNlIH0iIEBjbGljay5hd2F5PSJvcGVuID0gZmFsc2UiIHgtY2xvYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsb3NlLnN0b3A9Im9wZW4gPSBmYWxzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbmxpbmUtZmxleCByb3VuZGVkLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgcHgtMyBwdC0xIGJvcmRlciBib3JkZXItdHJhbnNwYXJlbnQgdGV4dC1zbSBsZWFkaW5nLTQgZm9udC1tZWRpdW0gcm91bmRlZC1tZCB0ZXh0LXdoaXRlIGJnLWdyYXktOTAwIGhvdmVyOnRleHQtZ3JheS0yMDAgZm9jdXM6b3V0bGluZS1ub25lIHRyYW5zaXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhbGxlcmVzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIEBjbGljaz0ib3Blbj0hb3BlbiIgY2xhc3M9Im1sLTIgLW1yLTAuNSBoLTQgdy00Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyMCAyMCIgZmlsbD0iY3VycmVudENvbG9yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPSJldmVub2RkIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTUuMjkzIDcuMjkzYTEgMSAwIDAxMS40MTQgMEwxMCAxMC41ODZsMy4yOTMtMy4yOTNhMSAxIDAgMTExLjQxNCAxLjQxNGwtNCA0YTEgMSAwIDAxLTEuNDE0IDBsLTQtNGExIDEgMCAwMTAtMS40MTR6Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC1ydWxlPSJldmVub2RkIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjYW4oJ29yZ2FuaXphcicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImFic29sdXRlIHotNTAgbXQtMiBiZy13aGl0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdNZW51IHRhbGxlcmVzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCd0YWxsZXJlcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ1RhbGxlcmVzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnb3JnYW5pemFkb3IuY3JlYXJ0YWxsZXInKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdDcmVhciB0YWxsZXInKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5taXMtc29saWNpdHVkZXMnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdFc3RhZG8gc29saWNpdHVkJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnb3JnYW5pemFkb3IudGFsbGVyL2FzaXN0ZW50ZXMnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdNaXMgdGFsbGVyZXMnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZWNhbignYWRtaW5pc3RyYXInKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB4LXNob3c9Im9wZW4iIGNsYXNzPSJhYnNvbHV0ZSB6LTUwIG10LTIgYmctd2hpdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQWNjb3VudCBNYW5hZ2VtZW50IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsb2NrIHB4LTQgcHktMiB0ZXh0LXhzIHRleHQtZ3JheS00MDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnQWRtaW5pc3RyYXIgdGFsbGVyJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCd0YWxsZXJlcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ1RhbGxlcmVzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnYWRtaW5pc3RyYWRvci50YWxsZXJlcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ051ZXZvcyB0YWxsZXJlcycpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1kcm9wZG93bi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlY2FuKCdyZXByZXNlbnRhcicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImFic29sdXRlIHotNTAgbXQtMiBiZy13aGl0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdWZXIgdGFsbGVyZXMnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ3RhbGxlcmVzLmluZGV4JykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnVmVyIFRhbGxlcmVzJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGNhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIEBlbmRhdXRoDQoNCiAgICAgICAgICAgICAgICAgICAgQGd1ZXN0DQogICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ3RhbGxlcmVzLmluZGV4JykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LXNsb3QgbmFtZT0nc2xvdCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXdoaXRlIGhvdmVyOnRyYW5zZm9ybSBob3ZlcjpzY2FsZS0xMjUiPnt7IF9fKCdUYWxsZXJlcycpIH19PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1zbG90Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgQGVuZGd1ZXN0DQoNCiAgICAgICAgICAgICAgICAgICAgQGF1dGgNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbiBzbTpmbGV4IHNtOml0ZW1zLWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVsYXRpdmUiIHgtZGF0YT0ieyBvcGVuOiBmYWxzZSB9IiBAY2xpY2suYXdheT0ib3BlbiA9IGZhbHNlIiB4LWNsb2FrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbG9zZS5zdG9wPSJvcGVuID0gZmFsc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5saW5lLWZsZXggcm91bmRlZC1tZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIHB4LTMgcHQtMSBib3JkZXIgYm9yZGVyLXRyYW5zcGFyZW50IHRleHQtc20gbGVhZGluZy00IGZvbnQtbWVkaXVtIHJvdW5kZWQtbWQgdGV4dC13aGl0ZSBiZy1ncmF5LTkwMCBob3Zlcjp0ZXh0LWdyYXktMjAwIGZvY3VzOm91dGxpbmUtbm9uZSB0cmFuc2l0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudG9zDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBAY2xpY2s9Im9wZW49IW9wZW4iIGNsYXNzPSJtbC0yIC1tci0wLjUgaC00IHctNCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMjAgMjAiIGZpbGw9ImN1cnJlbnRDb2xvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik01LjI5MyA3LjI5M2ExIDEgMCAwMTEuNDE0IDBMMTAgMTAuNTg2bDMuMjkzLTMuMjkzYTEgMSAwIDExMS40MTQgMS40MTRsLTQgNGExIDEgMCAwMS0xLjQxNCAwbC00LTRhMSAxIDAgMDEwLTEuNDE0eiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT0iZXZlbm9kZCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjYW4oJ29yZ2FuaXphcicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImFic29sdXRlIHotNTAgbXQtMiBiZy13aGl0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdNZW51IGV2ZW50b3MnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ2V2ZW50b3MuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdFdmVudG9zJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnb3JnYW5pemFkb3IuY3JlYXJldmVudG8nKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdDcmVhciBldmVudG8nKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5taXMtZXZlbnRvcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ01pcyBzb2xpY2l0dWRlcycpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1kcm9wZG93bi1saW5rPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ29yZ2FuaXphZG9yLmV2ZW50by9hc2lzdGVudGVzJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnTWlzIGV2ZW50b3MnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZWNhbignYWRtaW5pc3RyYXInKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB4LXNob3c9Im9wZW4iIGNsYXNzPSJhYnNvbHV0ZSB6LTUwIG10LTIgYmctd2hpdGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdBZG1pbmlzdHJhciBldmVudG8nKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ2V2ZW50b3MuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdFdmVudG9zJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnYWRtaW5pc3RyYWRvci5ldmVudG9zJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnTnVldm9zIGV2ZW50b3MnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtZHJvcGRvd24tbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlY2FuKCdyZXByZXNlbnRhcicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImFic29sdXRlIHotNTAgbXQtMiBiZy13aGl0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdWZXIgZXZlbnRvcycpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtZHJvcGRvd24tbGluayBocmVmPSJ7eyByb3V0ZSgnZXZlbnRvcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ1ZlciBFdmVudG9zJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGNhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIEBlbmRhdXRoDQoNCiAgICAgICAgICAgICAgICAgICAgQGd1ZXN0DQogICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2V2ZW50b3MuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtc2xvdCBuYW1lPSdzbG90Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtd2hpdGUgaG92ZXI6dHJhbnNmb3JtIGhvdmVyOnNjYWxlLTEyNSI+e3sgX18oJ0V2ZW50b3MnKSB9fTwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtc2xvdD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgIEBlbmRndWVzdA0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbiBzbTpmbGV4IHNtOml0ZW1zLWNlbnRlciI+DQogICAgICAgICAgICAgICAgPCEtLSBTZXR0aW5ncyBEcm9wZG93biAtLT4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlbGF0aXZlIiB4LWRhdGE9J3sgb3BlbjogZmFsc2UgfSc+DQoNCiAgICAgICAgICAgICAgICAgICAgPGxpdmV3aXJlOmZvcm11bGFyaW9zLmJ1c2Nhci1hcnRpc3RhPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgICAgIEBndWVzdA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZzpibG9jayBzbTpoaWRkZW4gbWwtNSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2xvZ2luJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LXNsb3QgbmFtZT0nc2xvdCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXdoaXRlIG1yLTUiPnt7IF9fKCdJbmljaWFyIHNlc2nDs24nKSB9fTwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtc2xvdD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtbmF2LWxpbms+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1uYXYtbGluayBocmVmPSJ7eyByb3V0ZSgncmVnaXN0ZXInKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtc2xvdCBuYW1lPSdzbG90Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtd2hpdGUiPnt7IF9fKCdSZWdpc3RyYXJzZScpIH19PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1zbG90Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgQGVuZGd1ZXN0DQoNCiAgICAgICAgICAgICAgICBAYXV0aA0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVsYXRpdmUgdy00OCIgeC1kYXRhPSJ7b3BlbjpmYWxzZX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbmxpbmUtZmxleCByb3VuZGVkLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgcHgtMyBweS0yIGJvcmRlciBib3JkZXItdHJhbnNwYXJlbnQgdGV4dC1zbSBsZWFkaW5nLTQgZm9udC1tZWRpdW0gcm91bmRlZC1tZCB0ZXh0LXdoaXRlIGJnLWdyYXktOTAwIGhvdmVyOnRleHQtZ3JheS0yMDAgZm9jdXM6b3V0bGluZS1ub25lIHRyYW5zaXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IEF1dGg6OnVzZXIoKS0+bm9tYnJlIH19IHt7IEF1dGg6OnVzZXIoKS0+YXBlbGxpZG9zIH19DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIEBjbGljaz0ib3Blbj0hb3BlbiIgY2xhc3M9Im1sLTIgLW1yLTAuNSBoLTQgdy00IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAyMCAyMCIgZmlsbD0iY3VycmVudENvbG9yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPSJldmVub2RkIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTUuMjkzIDcuMjkzYTEgMSAwIDAxMS40MTQgMEwxMCAxMC41ODZsMy4yOTMtMy4yOTNhMSAxIDAgMTExLjQxNCAxLjQxNGwtNCA0YTEgMSAwIDAxLTEuNDE0IDBsLTQtNGExIDEgMCAwMTAtMS40MTR6Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC1ydWxlPSJldmVub2RkIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgeC1zaG93PSJvcGVuIiBjbGFzcz0iYWJzb2x1dGUgYmctZ3JheS0xMDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEFjY291bnQgTWFuYWdlbWVudCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2sgcHgtNCBweS0yIHRleHQteHMgdGV4dC1ncmF5LTQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnQWRtaW5pc3RyYWNpw7NuIGRlIGN1ZW50YScpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1kcm9wZG93bi1saW5rIGhyZWY9Int7IHJvdXRlKCdwcm9maWxlLnNob3cnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBfXygnUGVyZmlsJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1kcm9wZG93bi1saW5rPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZiAoTGFyYXZlbFxKZXRzdHJlYW1cSmV0c3RyZWFtOjpoYXNBcGlGZWF0dXJlcygpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FwaS10b2tlbnMuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ0FQSSBUb2tlbnMnKSB9fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1kcm9wZG93bi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3JkZXItdCBib3JkZXItZ3JheS0xMDAiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQXV0aGVudGljYXRpb24gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSJ7eyByb3V0ZSgnbG9nb3V0JykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNzcmYNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LWRyb3Bkb3duLWxpbmsgaHJlZj0ie3sgcm91dGUoJ2xvZ291dCcpIH19Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9ImV2ZW50LnByZXZlbnREZWZhdWx0KCk7ICB0aGlzLmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9fKCdDZXJyYXIgc2VzacOzbicpIH19DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LWRyb3Bkb3duLWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIEBlbmRhdXRoDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPCEtLSBIYW1idXJnZXIgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSItbXItMiBmbGV4IGl0ZW1zLWNlbnRlciBzbTpoaWRkZW4iPg0KICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSJvcGVuID0gISBvcGVuIg0KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtMiByb3VuZGVkLW1kIHRleHQtZ3JheS00MDAgaG92ZXI6dGV4dC1ncmF5LTUwMCBob3ZlcjpiZy1ncmF5LTEwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6YmctZ3JheS0xMDAgZm9jdXM6dGV4dC1ncmF5LTUwMCB0cmFuc2l0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz0iaC02IHctNiIgc3Ryb2tlPSJjdXJyZW50Q29sb3IiIGZpbGw9Im5vbmUiIHZpZXdCb3g9IjAgMCAyNCAyNCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCA6Y2xhc3M9InsnaGlkZGVuJzogb3BlbiwgJ2lubGluZS1mbGV4JzogISBvcGVuIH0iIGNsYXNzPSJpbmxpbmUtZmxleCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJNNCA2aDE2TTQgMTJoMTZNNCAxOGgxNiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIDpjbGFzcz0ieydoaWRkZW4nOiAhIG9wZW4sICdpbmxpbmUtZmxleCc6IG9wZW4gfSIgY2xhc3M9ImhpZGRlbiIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMiIgZD0iTTYgMThMMTggNk02IDZsMTIgMTIiIC8+DQogICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPCEtLSBSZXNwb25zaXZlIE5hdmlnYXRpb24gTWVudSAtLT4NCiAgICA8ZGl2IDpjbGFzcz0ieydibG9jayc6IG9wZW4sICdoaWRkZW4nOiAhIG9wZW59IiBjbGFzcz0iaGlkZGVuIHNtOmhpZGRlbiI+DQogICAgICAgIDxkaXYgY2xhc3M9InB0LTIgcGItMyBzcGFjZS15LTEiPg0KICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0iLyI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+e3sgX18oJ0luaWNpbycpIH19PC9zcGFuPg0KICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8IS0tIEFydGlzdGFzIHJlc3BvbnNpdmUgLS0+DQogICAgICAgIEBndWVzdA0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FydGlzdGFzLmluZGV4JykgfX0iPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj57eyBfXygnQXJ0aXN0YXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgQGVuZGd1ZXN0DQogICAgICAgIEBhdXRoDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbTpmbGV4IHNtOml0ZW1zLWNlbnRlciI+DQogICAgICAgICAgICAgICAgQGNhbigncmVwcmVzZW50YXInKQ0KICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtZGF0YT0ie29wZW46IGZhbHNlfSIgeC1jbG9haz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB0LTIgcGItMyBzcGFjZS15LTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGNsYXNzPSJmbGV4IGp1c3RpZnktY2VudGVyIGZvY3VzOmJvcmRlci1yZWQtNTAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+IHt7IF9fKCdBcnRpc3RhcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIEBjbGljaz0ib3BlbiA9ICFvcGVuIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGNsYXNzPSJoLTYgdy02IiBmaWxsPSJub25lIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDI0IDI0IiBzdHJva2U9ImN1cnJlbnRDb2xvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMiIgZD0iTTE5IDlsLTcgNy03LTciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImJnLXByaW1hcnkgYmctb3BhY2l0eS00MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdhcnRpc3Rhcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPiB7eyBfXygnQXJ0aXN0YXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdyZXByZXNlbnRhbnRlLmNyZWFyYXJ0aXN0YScpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdBZ3JlZ2FyIGFydGlzdGEnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdyZXByZXNlbnRhbnRlLm1pcy1hcnRpc3RhcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdFc3RhZG8gZGUgc29saWNpdHVkZXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdyZXByZXNlbnRhbnRlLnR1c2FydGlzdGFzJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+e3sgX18oJ1R1cyBhcnRpc3RhcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgQGVsc2VjYW4oJ2FkbWluaXN0cmFyJykNCiAgICAgICAgICAgICAgICAgICAgPGRpdiB4LWRhdGE9IntvcGVuOiBmYWxzZX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgY2xhc3M9ImZsZXgganVzdGlmeS1jZW50ZXIgZm9jdXM6Ym9yZGVyLXJlZC01MDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj4ge3sgX18oJ0FydGlzdGFzJykgfX08L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgQGNsaWNrPSJvcGVuID0gIW9wZW4iIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgY2xhc3M9ImgtNiB3LTYiIGZpbGw9Im5vbmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMjQgMjQiIHN0cm9rZT0iY3VycmVudENvbG9yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgc3Ryb2tlLXdpZHRoPSIyIiBkPSJNMTkgOWwtNyA3LTctNyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgeC1zaG93PSJvcGVuIiBjbGFzcz0iYmctcHJpbWFyeSBiZy1vcGFjaXR5LTQwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdC0yIHBiLTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FydGlzdGFzLmluZGV4JykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+IHt7IF9fKCdBcnRpc3RhcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdC0yIHBiLTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FkbWluaXN0cmFkb3IuYXJ0aXN0YXMnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj57eyBfXygnTnVldm9zIGFydGlzdGFzJykgfX08L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgQGVuZGNhbg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIEBlbmRhdXRoDQoNCiAgICAgICAgPCEtLSBUYWxsZXJlcyByZXBvbnNpdmUgLS0+DQogICAgICAgIEBndWVzdA0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FydGlzdGFzLmluZGV4JykgfX0iPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj57eyBfXygnVGFsbGVyZXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgQGVuZGd1ZXN0DQoNCiAgICAgICAgQGF1dGgNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNtOmZsZXggc206aXRlbXMtY2VudGVyIj4NCiAgICAgICAgICAgICAgICBAY2FuKCdvcmdhbml6YXInKQ0KICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtZGF0YT0ieyBvcGVuOiBmYWxzZSB9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB0LTIgcGItMyBzcGFjZS15LTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGNsYXNzPSJmbGV4IGp1c3RpZnktY2VudGVyIGZvY3VzOmJvcmRlci1yZWQtNTAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+IHt7IF9fKCdUYWxsZXJlcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIEBjbGljaz0ib3BlbiA9ICFvcGVuIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGNsYXNzPSJoLTYgdy02IiBmaWxsPSJub25lIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDI0IDI0IiBzdHJva2U9ImN1cnJlbnRDb2xvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMiIgZD0iTTE5IDlsLTcgNy03LTciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImJnLXByaW1hcnkgYmctb3BhY2l0eS00MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCd0YWxsZXJlcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPiB7eyBfXygnVGFsbGVyZXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5jcmVhcnRhbGxlcicpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdDcmVhciB0YWxsZXInKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5taXMtc29saWNpdHVkZXMnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj57eyBfXygnRXN0YWRvIHNvbGljaXR1ZCcpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdC0yIHBiLTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ29yZ2FuaXphZG9yLnRhbGxlci9hc2lzdGVudGVzJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+IHt7IF9fKCdNaXMgdGFsbGVyZXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIEBlbHNlY2FuKCdhZG1pbmlzdHJhcicpDQogICAgICAgICAgICAgICAgICAgIDxkaXYgeC1kYXRhPSJ7b3BlbjogZmFsc2V9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB0LTIgcGItMyBzcGFjZS15LTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGNsYXNzPSJmbGV4IGp1c3RpZnktY2VudGVyIGZvY3VzOmJvcmRlci1yZWQtNTAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+IHt7IF9fKCdUYWxsZXJlcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIEBjbGljaz0ib3BlbiA9ICFvcGVuIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGNsYXNzPSJoLTYgdy02IiBmaWxsPSJub25lIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDI0IDI0IiBzdHJva2U9ImN1cnJlbnRDb2xvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMiIgZD0iTTE5IDlsLTcgNy03LTciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtc2hvdz0ib3BlbiIgY2xhc3M9ImJnLXByaW1hcnkgYmctb3BhY2l0eS00MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCd0YWxsZXJlcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPiB7eyBfXygnVGFsbGVyZXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdhZG1pbmlzdHJhZG9yLnRhbGxlcmVzJykgfX0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+e3sgX18oJ051ZXZvcyB0YWxsZXJlcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgQGVuZGNhbg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIEBlbmRhdXRoDQoNCg0KICAgICAgICA8IS0tIEV2ZW50b3MgcmVzcG9uc2l2ZSAtLT4NCiAgICAgICAgQGF1dGgNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNtOmZsZXggc206aXRlbXMtY2VudGVyIj4NCiAgICAgICAgICAgICAgICBAY2FuKCdvcmdhbml6YXInKQ0KICAgICAgICAgICAgICAgICAgICA8ZGl2IHgtZGF0YT0ieyBvcGVuOiBmYWxzZSB9IiB4LWNsb2FrPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdC0yIHBiLTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgY2xhc3M9ImZsZXgganVzdGlmeS1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtd2hpdGUgZmxleCBqdXN0aWZ5LWNlbnRlciI+e3sgX18oJ0V2ZW50b3MnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgQGNsaWNrPSJvcGVuID0gIW9wZW4iIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgY2xhc3M9ImgtNiB3LTYiIGZpbGw9Im5vbmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDI0IDI0IiBzdHJva2U9ImN1cnJlbnRDb2xvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiBzdHJva2Utd2lkdGg9IjIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0xOSA5bC03IDctNy03IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgeC1zaG93PSJvcGVuIiBjbGFzcz0iYmctcHJpbWFyeSBiZy1vcGFjaXR5LTQwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdC0yIHBiLTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2V2ZW50b3MuaW5kZXgnKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj4ge3sgX18oJ0V2ZW50b3MnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5jcmVhcmV2ZW50bycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdDcmVhciBldmVudG8nKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5taXMtZXZlbnRvcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdNaXMgc29saWNpdHVkZXMnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdvcmdhbml6YWRvci5ldmVudG8vYXNpc3RlbnRlcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPiB7eyBfXygnTWlzIGV2ZW50b3MnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIEBlbHNlY2FuKCdhZG1pbmlzdHJhcicpDQogICAgICAgICAgICAgICAgICAgIDxkaXYgeC1kYXRhPSJ7b3BlbjogZmFsc2V9IiB4LWNsb2FrPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgY2xhc3M9ImZsZXgganVzdGlmeS1jZW50ZXIgZm9jdXM6Ym9yZGVyLXJlZC01MDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIj4ge3sgX18oJ0V2ZW50b3MnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBAY2xpY2s9Im9wZW4gPSAhb3BlbiIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBjbGFzcz0iaC02IHctNiIgZmlsbD0ibm9uZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAyNCAyNCIgc3Ryb2tlPSJjdXJyZW50Q29sb3IiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiBzdHJva2Utd2lkdGg9IjIiIGQ9Ik0xOSA5bC03IDctNy03IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB4LXNob3c9Im9wZW4iIGNsYXNzPSJiZy1wcmltYXJ5IGJnLW9wYWNpdHktNDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB0LTIgcGItMyBzcGFjZS15LTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluayBocmVmPSJ7eyByb3V0ZSgnZXZlbnRvcy5pbmRleCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPiB7eyBfXygnRXZlbnRvcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdC0yIHBiLTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHgtamV0LXJlc3BvbnNpdmUtbmF2LWxpbmsgaHJlZj0ie3sgcm91dGUoJ2FkbWluaXN0cmFkb3IuZXZlbnRvcycpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdOdWV2b3MgZXZlbnRvcycpIH19PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3gtamV0LXJlc3BvbnNpdmUtbmF2LWxpbms+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgQGVuZGNhbg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIEBlbmRhdXRoDQoNCg0KDQogICAgICAgIDwhLS0gUmVzcG9uc2l2ZSBTZXR0aW5ncyBPcHRpb25zIC0tPg0KICAgICAgICA8ZGl2IGNsYXNzPSJwdC0zIHBiLTUgYm9yZGVyLXQgYm9yZGVyLWdyYXktMjAwIj4NCiAgICAgICAgICAgIEBndWVzdA0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdsb2dpbicpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPnt7IF9fKCdJbmljaWFyIHNlc2nDs24nKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtMiBwYi0zIHNwYWNlLXktMSI+DQogICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdyZWdpc3RlcicpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXdoaXRlIGZsZXgganVzdGlmeS1jZW50ZXIiPiB7eyBfXygnUmVnaXN0cmFyc2UnKSB9fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC94LWpldC1yZXNwb25zaXZlLW5hdi1saW5rPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgQGVuZGd1ZXN0DQoNCiAgICAgICAgICAgIEBhdXRoDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleCBpdGVtcy1jZW50ZXIgcHgtNCI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtbWVkaXVtIHRleHQtYmFzZSB0ZXh0LXdoaXRlIj57eyBBdXRoOjp1c2VyKCktPm5hbWUgfX08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtbWVkaXVtIHRleHQtc20gdGV4dC13aGl0ZSI+e3sgQXV0aDo6dXNlcigpLT5lbWFpbCB9fTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgQGVuZGF1dGgNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTMgc3BhY2UteS0xIj4NCiAgICAgICAgICAgICAgICA8IS0tIEFjY291bnQgTWFuYWdlbWVudCAtLT4NCiAgICAgICAgICAgICAgICBAYXV0aA0KDQogICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdwcm9maWxlLnNob3cnKSB9fSINCiAgICAgICAgICAgICAgICAgICAgICAgIDphY3RpdmU9InJlcXVlc3QoKS0+cm91dGVJcygncHJvZmlsZS5zaG93JykiPg0KICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ1BlcmZpbCcpIH19DQogICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCg0KICAgICAgICAgICAgICAgICAgICA8IS0tIEF1dGhlbnRpY2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0ie3sgcm91dGUoJ2xvZ291dCcpIH19Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIEBjc3JmDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDx4LWpldC1yZXNwb25zaXZlLW5hdi1saW5rIGhyZWY9Int7IHJvdXRlKCdsb2dvdXQnKSB9fSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrPSJldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX18oJ0NlcnJhciBzZXNpw7NuJykgfX0NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveC1qZXQtcmVzcG9uc2l2ZS1uYXYtbGluaz4NCiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KDQogICAgICAgICAgICAgICAgQGVuZGF1dGgNCg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9uYXY+DQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";