1656736696
AwuilbDvXz%3Abe457e2b3d0ebb6a7dc2d91647576b67-311c8fc7184e6c71b01bdb6fc26142d8
s:11796:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"311c8fc7184e6c71b01bdb6fc26142d8";s:39:" phpDocumentor\Reflection\Php\File name";s:44:"6d10b6c1d4a4e4a9a20c9fcba27e5155acb8d77b.php";s:39:" phpDocumentor\Reflection\Php\File path";s:68:"storage/framework/views/6d10b6c1d4a4e4a9a20c9fcba27e5155acb8d77b.php";s:41:" phpDocumentor\Reflection\Php\File source";s:7977:"<div>
    <div class="min-h-screen text-white py-5">
        <div class="">
            <div>
                <span class="text-4xl block mb-5">Solicitudes pendientes</span>
            </div>
            <?php if(count($talleresPendientes) > 0): ?>
                <div class="swiper-container swiperPendientes">
                    <div class="swiper-wrapper">
                        <?php $__currentLoopData = $talleresPendientes; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $tallerPendiente): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <?php
if (! isset($_instance)) {
    $html = \Livewire\Livewire::mount('organizador.talleres.taller', ['taller' => $tallerPendiente])->html();
} elseif ($_instance->childHasBeenRendered($tallerPendiente->id)) {
    $componentId = $_instance->getRenderedChildComponentId($tallerPendiente->id);
    $componentTag = $_instance->getRenderedChildComponentTagName($tallerPendiente->id);
    $html = \Livewire\Livewire::dummyMount($componentId, $componentTag);
    $_instance->preserveRenderedChild($tallerPendiente->id);
} else {
    $response = \Livewire\Livewire::mount('organizador.talleres.taller', ['taller' => $tallerPendiente]);
    $html = $response->html();
    $_instance->logRenderedChild($tallerPendiente->id, $response->id(), \Livewire\Livewire::getRootElementTagName($html));
}
echo $html;
?>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </div>
                </div>
            <?php else: ?>
                <span>No tienes solicitudes pendientes</span>
            <?php endif; ?>
        </div>


        <div class="mt-10 mb-16">
            <div>
                <span class="text-4xl block mb-5">Solicitudes revisadas</span>
            </div>
            <?php if(count($talleresRevisados) > 0): ?>
                <div class="swiper-container swiperRevisadas">
                    <div class="swiper-wrapper">
                        <?php $__currentLoopData = $talleresRevisados; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $tallerRevisado): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <?php
if (! isset($_instance)) {
    $html = \Livewire\Livewire::mount('organizador.talleres.taller', ['taller' => $tallerRevisado])->html();
} elseif ($_instance->childHasBeenRendered($tallerRevisado->id)) {
    $componentId = $_instance->getRenderedChildComponentId($tallerRevisado->id);
    $componentTag = $_instance->getRenderedChildComponentTagName($tallerRevisado->id);
    $html = \Livewire\Livewire::dummyMount($componentId, $componentTag);
    $_instance->preserveRenderedChild($tallerRevisado->id);
} else {
    $response = \Livewire\Livewire::mount('organizador.talleres.taller', ['taller' => $tallerRevisado]);
    $html = $response->html();
    $_instance->logRenderedChild($tallerRevisado->id, $response->id(), \Livewire\Livewire::getRootElementTagName($html));
}
echo $html;
?>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </div>
                </div>
            <?php else: ?>
                <span>No tienes solicitudes revisadas</span>
            <?php endif; ?>
        </div>

        <div class="mt-10 mb-16">
            <div>
                <span class="text-4xl block mb-5">Solicitudes modificadas</span>
            </div>
            <?php if(count($talleresModificados) > 0): ?>
                <div class="swiper-container swiperRevisadas">
                    <div class="swiper-wrapper">
                        <?php $__currentLoopData = $talleresModificados; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $tallerModificado): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <?php
if (! isset($_instance)) {
    $html = \Livewire\Livewire::mount('organizador.talleres.taller', ['taller' => $tallerModificado])->html();
} elseif ($_instance->childHasBeenRendered($tallerModificado->id)) {
    $componentId = $_instance->getRenderedChildComponentId($tallerModificado->id);
    $componentTag = $_instance->getRenderedChildComponentTagName($tallerModificado->id);
    $html = \Livewire\Livewire::dummyMount($componentId, $componentTag);
    $_instance->preserveRenderedChild($tallerModificado->id);
} else {
    $response = \Livewire\Livewire::mount('organizador.talleres.taller', ['taller' => $tallerModificado]);
    $html = $response->html();
    $_instance->logRenderedChild($tallerModificado->id, $response->id(), \Livewire\Livewire::getRootElementTagName($html));
}
echo $html;
?>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </div>
                </div>
            <?php else: ?>
                <span>No tienes solicitudes revisadas</span>
            <?php endif; ?>
        </div>

        <div class="grid grid-cols-12">
            <div class="lg:col-start-4 lg:col-span-6 col-start-3 col-span-8 px-4 py-6">
                <div class="grid lg:grid-cols-3">

                    <!-- Talleres aprobados -->
                    <div class="bg-green-400 px-4">
                        <div class="flex flex-col items-center py-5">
                            <div class="flex flex-col items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M5 13l4 4L19 7" />
                                </svg>
                                <div class="flex flex-col items-center">
                                    <span class="block mb-1">Talleres aprobados</span>
                                    <span><?php echo e(auth()->user()->hojavida->talleres_aprobados); ?></span>
                                </div>
                            </div>

                        </div>
                    </div>

                    <!-- Talleres rechazados -->
                    <div class="bg-red-600">
                        <div class="flex flex-col items-center py-5">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                            <div class="flex flex-col items-center">

                                <span class="block mb-1">Eliminados/Rechazados</span>
                                <span><?php echo e(auth()->user()->hojavida->talleres_rechazados); ?></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    var swiper = new Swiper(".swiperPendientes", {
        slidesPerView: 3,
        spaceBetween: 30,
        pagination: {
            el: ".swiper-pagination",
            clickable: true,
        },
    });

    var swiper = new Swiper(".swiperRevisadas", {
        slidesPerView: 3,
        spaceBetween: 30,
        pagination: {
            el: ".swiper-pagination",
            clickable: true,
        },
    });
</script>
<?php /**PATH C:\Users\Jorge\Desktop\LaravelByXampp\bart\resources\views/livewire/organizador/talleres/mis-talleres.blade.php ENDPATH**/ ?>";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";